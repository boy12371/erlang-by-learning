%% @author Richard
%% Return a multiplication table
%%-----------------------------------------------------------------------
%% Func: mul/0, mul/1, mul/2
%% Return: 1*1=1        |
%%         1*2=2 2*2=4  |
%%         [ok, ok]     |
%%-----------------------------------------------------------------------


-module(mul).

%% ====================================================================
%% API functions
%% ====================================================================
-export([mul/0, mul/1, mul/2]).


%% ====================================================================
%% mul/0 functions
%% Return default 1-9 multiplication table
%% ====================================================================
mul() ->
    mul_y({1, 9}, []).


%% ====================================================================
%% mul/1 functions
%% Return 1-X multiplication table
%% ====================================================================
mul(X) ->
    mul_y({1, X}, []).


%% ====================================================================
%% mul/2 functions
%% Return X-Y multiplication table
%% ====================================================================
mul(X, Y) ->
    mul_y({X, Y}, []).


%% ====================================================================
%% mul_y functions
%% tail recursion multiplication table y
%% ====================================================================
mul_y({N, M}, List) when is_integer(N), (N =< M) and (N > 0) ->
    mul_y({N + 1, M}, [mul_x({1, N}) | List]);
mul_y({_N, _M}, _List) ->
    ok.


%% ====================================================================
%% mul_x functions
%% recursion multiplication table x
%% ====================================================================
mul_x({N, M}) when is_integer(N), (N =< M) and (N > 0) ->
    io:format("~w*~w=~w ", [N, M, N*M]),
    mul_x({N + 1, M});
mul_x({_N, _M}) ->
    io:format("~n").

